"""
Django settings for MySearchEngine project.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from elasticsearch import Elasticsearch
from corsheaders.defaults import default_headers

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j)_&(bmbw3h4#rq9jrtj_oy4pb^mo7^mqlnpiy0xj3ze!@erkn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if DEBUG:
    DOMAIN = '127.0.0.1'
    HOST_URL = 'http://'+DOMAIN+":8000"
else:
    DOMAIN = 'api.searchmyweb.in'
    HOST_URL = 'https://'+DOMAIN

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    "X-AccessToken",
    "authtoken"
 ]


ALLOWED_HOSTS = [DOMAIN]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'UserManagementApp',
    'rest_framework',
    'django_crontab',
    'django_user_agents',
    'django_jenkins',
    'corsheaders',
    'server_status'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware'
]

ROOT_URLCONF = 'MySearchEngine.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MySearchEngine.wsgi.application'

AUTH_USER_MODEL = "UserManagementApp.User"

ELASTIC_SEARCH_OBJ = Elasticsearch([{'host': 'localhost', 'port': 9200, 'scheme': 'http'}], verify_certs=True)

if DEBUG:
    ELASTIC_SEARCH_OBJ = Elasticsearch(
        [{'host': 'localhost', 'port': 9200, 'scheme': 'http'}], verify_certs=True)   

ELASTICSEARCH_URL = "http://localhost:9200/"
# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

if not DEBUG:
    # Sqlite Database Configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

else:
    # Postgres Database Configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'mywebsearch_2022_05_07',
            'USER': 'search_user',
            'PASSWORD': 'Search@143',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

JENKINS_TASKS = (
    'django_jenkins.tasks.run_pep8',
    'django_jenkins.tasks.run_pyflakes',
)

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

if not os.path.exists('log'):
    os.makedirs('log')

if not os.path.exists('files'):
    os.makedirs('files')

if not os.path.exists('files/deploy'):
    os.makedirs('files/deploy')

APP_LOG_FILENAME = os.path.join(BASE_DIR, 'log/app.log')

ERROR_LOG_FILENAME = os.path.join(BASE_DIR, 'log/error.log')

LOGFILE_SIZE = 20 * 1024 * 1024

LOGFILE_COUNT = 10

USERMANAGEMENTAPP_LOGFILE = 'UserManagementApp'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': "[%(asctime)s] %(levelname)s [%(filename)s:%(lineno)s] [%(AppName)s] %(message)s",
            'datefmt': "%d-%b-%Y %H:%M:%S"
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ERROR_LOG_FILENAME,
            'maxBytes': LOGFILE_SIZE,
            'backupCount': LOGFILE_COUNT,
        },
        'applog': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': APP_LOG_FILENAME,
            'maxBytes': LOGFILE_SIZE,
            'backupCount': LOGFILE_COUNT,
            'formatter': 'standard',
        },
        'errorlog': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ERROR_LOG_FILENAME,
            'maxBytes': LOGFILE_SIZE,
            'backupCount': LOGFILE_COUNT,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'INFO',
            'propagate': True,
        },
        USERMANAGEMENTAPP_LOGFILE: {
            'handlers': ['applog', 'errorlog'],
            'level': 'INFO',
            'propagate': True,
        }

    }
}

HEALTH_CHECK = ['CERTIFICATE', 'ELASTIC_SEARCH', 'POSTGRES']

MIT_WS_CERTIFICATE = "/etc/letsencrypt/live/searchmyweb.in/fullchain.pem"

STATUS_TOKEN = "16060a30-413a-4325-88a1-10e2770c177e"

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

MEDIA_URL = '/files/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'files/')

LOGIN_URL = '/login'

CRONJOBS = [
    ('0 0 * * *', 'scripts.analytics_cronjob.cronjob'),
]
