"""
Django settings for MySearchEngine project.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from opensearchpy import OpenSearch
from corsheaders.defaults import default_headers
from decouple import config, Csv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='j)_&(bmbw3h4#rq9jrtj_oy4pb^mo7^mqlnpiy0xj3ze!@erkn')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

DOMAIN = config('DOMAIN', default='127.0.0.1')
HOST_URL = config('HOST_URL', default='http://127.0.0.1:8000')

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    "X-AccessToken",
    "authtoken"
 ]

ALLOWED_HOSTS = [DOMAIN]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'UserManagementApp',
    'rest_framework',
    'django_crontab',
    'django_user_agents',
    'django_jenkins',
    'corsheaders',
    'server_status'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware'
]

ROOT_URLCONF = 'MySearchEngine.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MySearchEngine.wsgi.application'

AUTH_USER_MODEL = "UserManagementApp.User"

# OpenSearch Configuration
OPENSEARCH_HOST = config('OPENSEARCH_HOST', default='localhost')
OPENSEARCH_PORT = config('OPENSEARCH_PORT', default=9200, cast=int)
OPENSEARCH_SCHEME = config('OPENSEARCH_SCHEME', default='http')
OPENSEARCH_VERIFY_CERTS = config('OPENSEARCH_VERIFY_CERTS', default=True, cast=bool)

ELASTIC_SEARCH_OBJ = OpenSearch([
    {
        'host': OPENSEARCH_HOST, 
        'port': OPENSEARCH_PORT, 
        'scheme': OPENSEARCH_SCHEME
    }
], verify_certs=OPENSEARCH_VERIFY_CERTS)

ELASTICSEARCH_URL = config('OPENSEARCH_URL', default='http://localhost:9200/')

# Database Configuration
DB_ENGINE = config('DB_ENGINE', default='django.db.backends.postgresql_psycopg2')
DB_NAME = config('DB_NAME', default='mywebsearch_2022_05_07')
DB_USER = config('DB_USER', default='search_user')
DB_PASSWORD = config('DB_PASSWORD', default='Search@143')
DB_HOST = config('DB_HOST', default='localhost')
DB_PORT = config('DB_PORT', default='5432')

if DEBUG:
    # Sqlite Database Configuration for production
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    # Postgres Database Configuration for development
    DATABASES = {
        'default': {
            'ENGINE': DB_ENGINE,
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        }
    }

JENKINS_TASKS = (
    'django_jenkins.tasks.run_pep8',
    'django_jenkins.tasks.run_pyflakes',
)

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

if not os.path.exists('log'):
    os.makedirs('log')

if not os.path.exists('files'):
    os.makedirs('files')

if not os.path.exists('files/deploy'):
    os.makedirs('files/deploy')

APP_LOG_FILENAME = os.path.join(BASE_DIR, 'log/app.log')
ERROR_LOG_FILENAME = os.path.join(BASE_DIR, 'log/error.log')

LOGFILE_SIZE = config('LOGFILE_SIZE', default=20971520, cast=int)  # 20MB
LOGFILE_COUNT = config('LOGFILE_COUNT', default=10, cast=int)
USERMANAGEMENTAPP_LOGFILE = config('USERMANAGEMENTAPP_LOGFILE', default='UserManagementApp')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': "[%(asctime)s] %(levelname)s [%(filename)s:%(lineno)s] [%(AppName)s] %(message)s",
            'datefmt': "%d-%b-%Y %H:%M:%S"
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ERROR_LOG_FILENAME,
            'maxBytes': LOGFILE_SIZE,
            'backupCount': LOGFILE_COUNT,
        },
        'applog': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': APP_LOG_FILENAME,
            'maxBytes': LOGFILE_SIZE,
            'backupCount': LOGFILE_COUNT,
            'formatter': 'standard',
        },
        'errorlog': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ERROR_LOG_FILENAME,
            'maxBytes': LOGFILE_SIZE,
            'backupCount': LOGFILE_COUNT,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'INFO',
            'propagate': True,
        },
        USERMANAGEMENTAPP_LOGFILE: {
            'handlers': ['applog', 'errorlog'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}

# Health Check Configuration
HEALTH_CHECK = config('HEALTH_CHECK', default='CERTIFICATE,ELASTIC_SEARCH,POSTGRES', cast=Csv())

# Security Configuration
MIT_WS_CERTIFICATE = config('MIT_WS_CERTIFICATE', default='/etc/letsencrypt/live/searchmyweb.in/fullchain.pem')
STATUS_TOKEN = config('STATUS_TOKEN', default='16060a30-413a-4325-88a1-10e2770c177e')

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
MEDIA_URL = '/files/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'files/')
LOGIN_URL = '/login'

CRONJOBS = [
    ('0 0 * * *', 'scripts.analytics_cronjob.cronjob'),
]
