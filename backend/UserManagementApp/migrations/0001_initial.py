# Generated by Django 5.2.6 on 2025-09-14 12:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('role', models.CharField(choices=[('0', 'Owner'), ('1', 'Manager')], max_length=256)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='WebsiteLinkClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.TextField(db_index=True)),
                ('click_count', models.IntegerField()),
                ('created_date', models.DateField(db_index=True, default=django.utils.timezone.now)),
                ('search_user', models.ForeignKey(blank=True, help_text='Selected user will see the crawled links in EasyChat console and can do searching.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'WebsiteLinkClick',
                'verbose_name_plural': 'WebsiteLinkClicks',
            },
        ),
        migrations.CreateModel(
            name='StateWiseTrafficAnalytic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateField(db_index=True, default=django.utils.timezone.now)),
                ('state_wise_count', models.TextField(default='[]', help_text='State Wise Data')),
                ('search_user', models.ForeignKey(blank=True, help_text='Selected user will see the crawled links in EasyChat console and can do searching.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'StateWiseTrafficAnalytic',
                'verbose_name_plural': 'StateWiseTrafficAnalytics',
            },
        ),
        migrations.CreateModel(
            name='SearchQueryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('result', models.TextField()),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_date', models.DateField(db_index=True, default=django.utils.timezone.now)),
                ('device_type', models.CharField(blank=True, max_length=100, null=True)),
                ('browser_type', models.CharField(blank=True, max_length=100, null=True)),
                ('browser_version', models.CharField(blank=True, max_length=100, null=True)),
                ('os_type', models.CharField(blank=True, max_length=100, null=True)),
                ('os_version', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('latitude', models.CharField(blank=True, max_length=100, null=True)),
                ('longitude', models.CharField(blank=True, max_length=100, null=True)),
                ('search_user', models.ForeignKey(blank=True, help_text='Selected user will see the crawled links in EasyChat console and can do searching.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SearchQueryLog',
                'verbose_name_plural': 'SearchQueryLogs',
            },
        ),
        migrations.CreateModel(
            name='DailyWorldCluodAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateField(db_index=True, default=django.utils.timezone.now)),
                ('word_cloud_dictionary', models.TextField(default='[]', help_text='Word Cloud Data')),
                ('search_user', models.ForeignKey(blank=True, help_text='Selected user will see the crawled links in EasyChat console and can do searching.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'DailyWorldCluodAnalytics',
                'verbose_name_plural': 'DailyWorldCluodAnalytics',
            },
        ),
        migrations.CreateModel(
            name='DailyAnalyticsReports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateField(db_index=True, default=django.utils.timezone.now)),
                ('total_click_count', models.IntegerField()),
                ('total_search_count', models.IntegerField()),
                ('search_user', models.ForeignKey(blank=True, help_text='Selected user will see the crawled links in EasyChat console and can do searching.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'DailyAnalyticsReports',
                'verbose_name_plural': 'DailyAnalyticsReports',
            },
        ),
        migrations.CreateModel(
            name='AuthToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('last_used_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WebsiteLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(blank=True, db_index=True, help_text='Website link which will be crawled and indexed.', max_length=600, null=True)),
                ('click_count', models.IntegerField(default=0, help_text='Number of times users clicked on the link.')),
                ('index_level', models.IntegerField(blank=True, help_text='Indexing will be done till the given depth. Use "-1" for indexing the whole website.', null=True)),
                ('hyper_text', models.CharField(blank=True, choices=[('https', 'HTTPS'), ('http', 'HTTP')], help_text='Website with the chooseen hyper text will be crawled', max_length=5, null=True)),
                ('last_indexed', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='Date and time when the website is indexed.', null=True)),
                ('is_indexed', models.BooleanField(default=False, help_text='Designates that website link is indexed in elasticsearch or not.')),
                ('is_crawl', models.BooleanField(default=False, help_text='Designates that it should be crawled or not.')),
                ('created_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('search_user', models.ForeignKey(blank=True, help_text='Selected user will see the crawled links in EasyChat console and can do searching.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'WebsiteLink',
                'verbose_name_plural': 'WebsiteLinks',
                'unique_together': {('link', 'search_user')},
            },
        ),
    ]
